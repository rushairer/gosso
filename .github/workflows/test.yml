name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.25.x]
        database: [mysql, postgres, sqlite]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: gosso_test
          MYSQL_USER: gosso
          MYSQL_PASSWORD: gosso123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: gosso_test
          POSTGRES_USER: gosso
          POSTGRES_PASSWORD: gosso123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025  # SMTP port
          - 8025:8025  # Web UI port

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "以下文件需要格式化:"
          gofmt -s -l .
          exit 1
        fi

    - name: Set up test environment
      run: |
        # 等待服务启动
        echo "等待数据库和邮件服务启动..."
        sleep 15

    - name: Test database connections
      run: |
        if [ "${{ matrix.database }}" = "mysql" ]; then
          mysql -h 127.0.0.1 -P 3306 -u gosso -pgosso123 -e "SELECT 1" gosso_test || {
            echo "MySQL 连接失败，等待更长时间..."
            sleep 20
            mysql -h 127.0.0.1 -P 3306 -u gosso -pgosso123 -e "SELECT 1" gosso_test
          }
        elif [ "${{ matrix.database }}" = "postgres" ]; then
          PGPASSWORD=gosso123 psql -h localhost -U gosso -d gosso_test -c "SELECT 1" || {
            echo "PostgreSQL 连接失败，等待更长时间..."
            sleep 20
            PGPASSWORD=gosso123 psql -h localhost -U gosso -d gosso_test -c "SELECT 1"
          }
        fi

    - name: Run tests
      env:
        CGO_ENABLED: 1
        # 数据库连接配置
        MYSQL_DSN: "gosso:gosso123@tcp(localhost:3306)/gosso_test?charset=utf8mb4&parseTime=True&loc=Local"
        POSTGRES_DSN: "host=localhost user=gosso password=gosso123 dbname=gosso_test port=5432 sslmode=disable"
        # 邮件服务配置 (MailHog)
        SMTP_HOST: "localhost"
        SMTP_PORT: "1025"
        SMTP_USER: ""
        SMTP_PASSWORD: ""
        SMTP_FROM: "test@gosso.local"
      run: |
        # 运行所有测试，不再需要手动排除任何包
        case "${{ matrix.database }}" in
          sqlite)
            go test -v -race -coverprofile=coverage.out -tags sqlite ./...
            ;;
          mysql)
            go test -v -race -coverprofile=coverage.out -tags mysql ./...
            ;;
          postgres)
            go test -v -race -coverprofile=coverage.out -tags postgres ./...
            ;;
        esac

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.25.x' && matrix.database == 'sqlite'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x

    - name: Build application
      run: |
        make build

    - name: Test build artifacts
      run: |
        ./bin/gouno --help
        ./bin/gouno version || echo "版本命令可能未实现"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-lint-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-security-

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      run: |
        # 使用官方 gosec 安装方式
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest || {
          echo "gosec 安装失败，跳过安全扫描"
          exit 0
        }
        gosec ./... || {
          echo "gosec 扫描完成，可能发现安全问题"
          exit 0
        }

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...