name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: v1.0.0)'
        required: true
        type: string

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x

    - name: Run tests
      run: |
        go test -v -race -tags sqlite ./...

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        binary_name="gosso-${{ steps.version.outputs.version }}-${{ matrix.suffix }}"
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o "dist/${binary_name}" ./cmd/gouno
        
        # 创建压缩包
        cd dist
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip "${binary_name%.exe}.zip" "${binary_name}"
        else
          tar -czf "${binary_name}.tar.gz" "${binary_name}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gosso-${{ steps.version.outputs.version }}-${{ matrix.suffix }}
        path: dist/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist

    - name: Generate changelog
      id: changelog
      run: |
        # 生成变更日志
        echo "## 🚀 新功能" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## 🐛 Bug 修复" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## 📝 文档更新" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## 🔧 其他改进" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "**完整变更日志**: https://github.com/${{ github.repository }}/compare/v0.1.0...${{ steps.version.outputs.version }}" >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          dist/**/*.tar.gz
          dist/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/gosso:latest
          ${{ secrets.DOCKER_USERNAME }}/gosso:${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}