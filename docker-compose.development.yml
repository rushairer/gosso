services:
  # 应用服务 (开发模式 - 代码挂载 + 热重载)
  gosso:
    image: golang:alpine
    working_dir: /app
    ports:
      - "${APP_PORT:-8081}:${APP_PORT:-8081}"
    environment:
      - GIN_MODE=debug
      - GOSSO_ENV=development
      - APP_PORT=${APP_PORT:-8081}
      - CGO_ENABLED=0
    volumes:
      - .:/app
      - go-mod-cache:/go/pkg/mod
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailpit:
        condition: service_started
    networks:
      - gosso-dev-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache git ca-certificates tzdata &&
        if ! command -v air &> /dev/null; then
          go install github.com/air-verse/air@latest;
        fi &&
        air -c .air.toml
      "
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${APP_PORT:-8081}/test/alive"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL 数据库
  mysql:
    image: mariadb:10.11-jammy
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: ${MYSQL_DATABASE:-gosso_dev}
      MYSQL_USER: ${MYSQL_USER:-gosso}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-gosso123}
    ports:
      - "${MYSQL_EXTERNAL_PORT:-3307}:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./scripts/mysql:/docker-entrypoint-initdb.d:ro
    networks:
      - gosso-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=128M

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gosso_dev}
      POSTGRES_USER: ${POSTGRES_USER:-gosso}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gosso123}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5433}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/postgres:/docker-entrypoint-initdb.d:ro
    networks:
      - gosso-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gosso} -d ${POSTGRES_DB:-gosso_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_EXTERNAL_PORT:-6380}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - gosso-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes

  # Mailpit (开发环境邮件测试)
  mailpit:
    image: axllent/mailpit:latest
    ports:
      - "${SMTP_EXTERNAL_PORT:-1026}:1025"
      - "${MAILPIT_WEB_EXTERNAL_PORT:-8026}:8025"
    environment:
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
    networks:
      - gosso-dev-network
    restart: unless-stopped

# 网络配置
networks:
  gosso-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# 数据卷
volumes:
  mysql_dev_data:
    driver: local
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  go-mod-cache:
    driver: local